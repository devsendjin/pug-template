@charset "UTF-8";*,::after,::before{box-sizing:border-box}*{margin:0;padding:0;outline:0}::after,::before{text-decoration:inherit;vertical-align:inherit}html{cursor:default;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-tap-highlight-color:transparent;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;word-break:break-word}hr{height:0;overflow:visible}p{margin:5px 0 10px}a{text-decoration:none;color:inherit;cursor:pointer;background-color:transparent}b,strong{font-weight:bolder}small{font-size:80%}iframe{border-style:none}svg:not([fill]){fill:currentColor}ol,ul{list-style:none}button,input,select{margin:0}button{overflow:visible;text-transform:none;font-family:inherit}input,textarea{font-family:inherit;box-shadow:none;border-radius:0}input[type=search]::-webkit-search-cancel-button{display:none}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1}input:-ms-input-placeholder,textarea:-ms-input-placeholder{opacity:1}input::placeholder,textarea::placeholder{opacity:1}[type=button],[type=reset],[type=submit]{-webkit-appearance:none;-moz-appearance:none;appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}::-moz-focus-inner{border-style:none;padding:0}:-moz-ui-invalid{box-shadow:none}dialog{background-color:#fff;border:solid;color:#000;display:block;height:-moz-fit-content;height:-webkit-fit-content;height:fit-content;left:0;margin:auto;padding:1em;position:absolute;right:0;width:-moz-fit-content;width:-webkit-fit-content;width:fit-content}dialog:not([open]){display:none}[tabindex],a,area,button,input,label,select,summary,textarea{touch-action:manipulation}code,kbd,pre,samp{font-family:Menlo,Consolas,Roboto Mono,Ubuntu Monospace,Noto Mono,Oxygen Mono,Liberation Mono,monospace}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary,svg{display:block}.form{position:relative}.form .form-group{position:relative;width:100%;display:block}.form .form-group.message-group .textarea{scrollbar-width:none;-ms-overflow-style:none;resize:none;border:1px solid #000}.form .form-group.message-group .textarea::-webkit-scrollbar{display:none;width:0;height:0}.form .form-group.checkbox-holder .checkbox{clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;position:absolute;white-space:nowrap;height:1px;width:1px}.modal{position:fixed;display:flex;align-items:center;justify-content:center;top:0;left:0;width:100%;background-color:rgba(0,0,0,.9);overflow:auto;z-index:999;opacity:0;visibility:hidden;transition-property:opacity,visibility;transition-duration:.4s}.modal.active{opacity:1;visibility:visible}.modal .window-container{margin:auto;padding:50px 0}.modal .window-container .window{position:relative;background-color:#fff}.modal .window-container .window .close-btn{top:20px;right:20px}html.fixed,html.fixed body{overflow:hidden;position:fixed;width:100%;height:100%}.modal,body,html{height:100%}body{font-family:"Montserrat",system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-weight:400;font-size:16px;line-height:1.6;color:#000;display:flex;flex-direction:column;position:relative;background-color:#fff}body .main{flex-grow:1}body.lazyload-fade .lazyload,body.lazyload-fade .lazyloading{opacity:0;transition:opacity .6s}body.lazyload-fade .lazyloaded{opacity:1;transition:opacity .6s}.container{max-width:1300px;margin:0 auto;padding-left:15px;padding-right:15px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
